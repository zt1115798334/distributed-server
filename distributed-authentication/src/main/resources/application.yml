server:
  port: 8783
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://admin:admin@eureka-server1:8761/eureka,http://admin:admin@eureka-server2:8762/eureka
  instance:
    prefer-ip-address: true
    instance-id: service-distributed-authentication
    lease-expiration-duration-in-seconds: 5
    lease-renewal-interval-in-seconds: 2
feign:
  hystrix:
    enabled: true
  compression:
    request:
      enabled: true
      mime-types: # 可以被压缩的类型
        - text/xml
        - application/xml
        - application/json
      min-request-size: 2048 # 超过2048的字节进行压缩
spring:
  application:
    name: service-distributed-authentication
  sleuth:
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0
  zipkin:
    base-url: http://localhost:9411/
  jpa:
    database: mysql
    show-sql: true
    hibernate:
      ddl-auto: none
  shardingsphere:
    datasource:
      # 所有数据源的名字
      names: ds-student-0, ds-student-1
      # 订单 orders 数据源配置 00
      ds-student-0:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/student_db_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC
        username: root
        password: root
      # 订单 orders 数据源配置 01
      ds-student-1:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/student_db_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC
        username: root
        password: root
    # 分片规则
    sharding:
      binding-tables: t_user
      default-database-strategy:
        inline:
          algorithm-expression: ds-student-$->{id % 2}
          sharding-column: id
      tables:
        # user 表配置
        t_user:
          #          actualDataNodes: ds-orders-$->{0..1}.orders_$->{0..4} # 映射到 ds-orders 数据源的 orders 表
          #          actualDataNodes: ds-orders-0.orders_0, ds-orders-0.orders_2, ds-orders-0.orders_4, ds-orders-0.orders_6, ds-orders-1.orders_1, ds-orders-1.orders_3, ds-orders-1.orders_5, ds-orders-1.orders_7
          actual-data-nodes: ds-student-0.t_user, ds-student-1.t_user # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
          key-generator: # 主键生成策略
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              algorithm-expression: ds-student-$->{id % 2}
              sharding-column: id
    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL
  profiles:
    include: cache
custom:
  jwt:
    header: authorization
    expiration: 2  #过期时间
    expiration-unit: hours # 单位
    refresh-expiration: 6 #刷新时间 单位 小时
    refresh-expiration-unit: hours # 单位
    remember-me-expiration: 30 #记住我-过期时间 单位 天
    remember-me-expiration-unit: days #记住我-过期时间 单位
    remember-me-refresh-expiration: 40 #记住我-刷新时间 单位 天
    remember-me-refresh-expiration-unit: days #记住我-刷新时间 单位
    token-head: Bearer
    secret: 1,1,1,1,1,1,1,1,1,1,1,1,1,1,2


